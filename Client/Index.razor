@using Oqtane.Survey.Services
@using Oqtane.Survey.Models

@namespace Oqtane.Survey
@inherits ModuleBase
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager

@if (_Surveys == null)
{
    <p><em>Loading...</em></p> }
else
{
    <br />
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit"
                Text="Add TestExternal" />
    <br />
    <br />
    @if (_Surveys.Count != 0)
    {
        <RadzenDataList WrapItems="true" AllowPaging="true"
                        Data="@_Surveys"
                        PageSize="2" TItem="Survey">
            <Template Context="context">
                <RadzenCard Style="width:300px;">
                    <div class="row">
                        <div class="col-md-12">
                            <h2>Name: <b>@context.SurveyName</b></h2>
                            <p>
                                <ActionLink Action="Edit"
                                            Parameters="@($"id=" +
                                                      context.SurveyId.ToString())" />
                                &nbsp;&nbsp;
                                <ActionDialog Header="Delete RadzenTest"
                                              Message="@("Are You Sure You Wish To Delete The "
                                                        + context.SurveyName + " Survey?")"
                                              Action="Delete" Security="SecurityAccessLevel.Edit"
                                              Class="btn btn-danger"
                                              OnClick="@(async () => await Delete(context))" />
                            </p>
                        </div>
                    </div>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
    else
    {
        <p>No Surveys To Display</p>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Survey> _Surveys;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _Surveys = await SurveyService.GetSurveysAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey {Error}", ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    private async Task Delete(Survey Survey)
    {
        try
        {
            await SurveyService.DeleteSurveyAsync(Survey.SurveyId, ModuleState.ModuleId);
            await logger.LogInformation("Survey Deleted {Survey}", Survey);
            _Surveys = await SurveyService.GetSurveysAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Survey {Survey} {Error}", Survey, ex.Message);
            AddModuleMessage("Error Deleting Survey", MessageType.Error);
        }
    }
}